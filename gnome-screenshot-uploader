#!/usr/bin/python
# -*- coding: utf-8 -*-

import pygtk
pygtk.require('2.0')
import gtk
import sys
import os
from ConfigParser import ConfigParser
import getopt
import tempfile
from subprocess import call
import pycurl
from base64 import b64encode
from hashlib import sha1
import threading

gtk.gdk.threads_init()

class StatusWindow:
    def delete_event(self, widget, event, data=None):
        return False

    def destroy(self, widget, data=None):
        gtk.main_quit()

    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_decorated(False)
        self.window.set_keep_above(True)
        self.window.stick()
        self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_NOTIFICATION)

        # Move window to the bottom left
        self.window.set_gravity(gtk.gdk.GRAVITY_SOUTH_WEST)
        self.window.move(0, self.window.get_screen().get_height())

        self.hbox = gtk.HBox(spacing=6)

        # Add progressbar
        self.progressBar = gtk.ProgressBar()
        self.hbox.pack_start(self.progressBar, True, True, 0)
        self.progressBar.show()

        # Add label
        self.label = gtk.Label('Uploading screenshot â€¦')
        self.hbox.pack_start(self.label, True, True, 0)
        self.label.show()

        self.window.add(self.hbox)
        self.hbox.show()

        # Connect and show window
        self.window.connect('delete_event', self.delete_event)
        self.window.connect('destroy', self.destroy)
        self.window.show()

    def main(self):
        gtk.threads_enter()
        gtk.main()
        gtk.threads_leave()

    def progress(self, downloadTotal, downloadDone, uploadTotal, uploadDone):
        if uploadTotal == 0.0:
            return
        
        gtk.threads_enter()

        try:
            self.progressBar.set_fraction(uploadDone / uploadTotal)
        finally:
            gtk.threads_leave()

    def finish(self, result):
        gtk.threads_enter()

        try:
            clipboard = gtk.clipboard_get(gtk.gdk.SELECTION_CLIPBOARD)
            clipboard.set_text(result)
        finally:
            gtk.threads_leave()

        gtk.main_quit()

class Uploader(threading.Thread):
    def __init__(self, statusWindow, screenshotFilename):
        super(Uploader, self).__init__()
        self.statusWindow       = statusWindow
        self.screenshotFilename = screenshotFilename

    def run(self):
        config = ConfigParser()
        config.readfp(open(os.path.expanduser('~/.gnome-screenshot-uploader.cfg')))

        data = b64encode(open(self.screenshotFilename).read())
        signature = sha1(data + config.get('uploader', 'password')).hexdigest()

        curl = pycurl.Curl()
        curl.setopt(curl.URL, config.get('uploader', 'posturl'))
        curl.setopt(curl.HTTPHEADER, [
            'X-Username: ' + config.get('uploader', 'username'),
            'X-Signature: ' + signature,
            'Content-Type: text/plain'
        ])

        curl.setopt(curl.POST, 1)
        curl.setopt(curl.POSTFIELDS, data)

        curl.setopt(curl.NOPROGRESS, 0)
        curl.setopt(curl.PROGRESSFUNCTION, self.statusWindow.progress)

        self.result = ''
        curl.setopt(curl.WRITEFUNCTION, self.bodyCallback)

        curl.perform()
        curl.close()

        self.statusWindow.finish(self.result)

    def bodyCallback(self, string):
        self.result = self.result + string
        
def main(argv):
    try:
        opts, args = getopt.getopt(
            argv,
            'hwabBd:e:',
            ['help', 'window', 'area', 'include-border', 'remove-border', 'delay=', 'border-effect=']
        )
    except getopt.GetoptError:
        help()
        sys.exit(2)

    options = ['gnome-screenshot']
    
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            help()
            sys.exit()
        elif opt in ('-w', '--window'):
            options.append('--window')
        elif opt in ('-a', '--area'):
            options.append('--area')
        elif opt in ('-b', '--include-border'):
            options.append('--include-border')
        elif opt in ('-B', '--remove-border'):
            options.append('--remove-border')
        elif opt in ('-d', '--delay'):
            options.append('--delay=' + arg)
        elif opt in ('-e', '--border-effect'):
            options.append('--border-effect=' + arg)

    screenshotFile = tempfile.NamedTemporaryFile()
    options.append('--file=' + screenshotFile.name)

    if call(options) > 0:
        print 'Error while executing gnome-screenshot'
        sys.exit(1)

    statusWindow = StatusWindow()
    uploader = Uploader(statusWindow, screenshotFile.name)
    uploader.start()
    statusWindow.main()

    screenshotFile.close()

def help():
    print 'Usage: gnome-screenshot-uploader [OPTIONS...]'
    print ''
    print 'Available options:'
    print '  -h, --help'
    print '  -w, --window'
    print '  -a, --area'
    print '  -b, --include-border'
    print '  -B, --remove-border'
    print '  -d, --delay=seconds'
    print '  -e, --border-effect=effect'
    print ''
    print 'For detailed information about the parameters, see gnome-screenshot --help'

if __name__ == '__main__':
    main(sys.argv[1:])

